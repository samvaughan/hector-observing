{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Making Hector Tiles for Observing","text":"<p>Documentation for the code which makes the tile and robot files used at the telescope when observing for the Hector Galaxy Survey.</p> <p>The steps to make a tile are below. These are performed are performed automatically using the workflow tool <code>snakemake</code>. See Making a Hector Tile for more details!</p>"},{"location":"#quick-overview-of-pipeline-steps","title":"Quick Overview of Pipeline Steps","text":"<ol> <li>Remove all guide stars which are outside the central 70% of the field. (<code>select_guides_within_set_radius.py</code>).</li> <li>Copy the tile and guide tile to the <code>results/{run_start_date}_{run_end_date}/TilingOutputs/{region_name}/Tiles</code> folder.</li> <li>Run the distortion correction code, which turns right-ascension and declination into plate \\(x\\) and \\(y\\) coordinates and finds the appropriate sky-fibre positions (<code>run_distortion_correction_code.py</code>).</li> <li>Run the configuration code, which finds magnet positions across the plate (<code>HECTOR_ClusterFieldsTest.R</code>).</li> <li>Fix the file headers into the correct format (<code>fix_header_after_configuration.py</code>).</li> <li>Run the allocation code, which decides which hexabundle is placed on which galaxy. This code also creates the final output files in the format required by the computers at the AAT (<code>allocate_tile_for_galaxies.py</code>).</li> <li>Download the galaxy cutouts for each Hexabundle, Guide bundle and sky fibre (<code>get_galaxy_cutouts_DECALS.py</code> or <code>get_galaxy_cutouts_KIDS.py</code>).</li> <li>Run a series of sanity-checks to catch a number of simple mistakes (e.g. we check the number of guide bundles in each tile is 6, etc). Also use the Hector observing database to see how many galaxies in this tile have been observed before (<code>verify_tile_properties.py</code>).</li> <li>Add the tile to our database of configured tiles (<code>add_configured_tile_to_database.py</code>).</li> <li>Make the plot the observers used at the top-end of the telescope (<code>make_updated_hexabundle_diagrams.py</code>).</li> <li>Package everything up in a nice format which can be easily uploaded to the cloud.</li> </ol> <p>You can now upload the <code>{tile_ID}.tar.gz</code> file to the Data Central cloud.</p>"},{"location":"#tips-tricks-and-things-to-keep-in-mind","title":"Tips, Tricks and things to keep in mind","text":"<ul> <li>The <code>snakemake</code> workflow system depends on the filenames of the inputs and outputs to each rule. A lot of the headaches I've had with <code>snakemake</code> are when I think I've placed a file in one directory but it's actually in another, or when a file I've saved has a typo, etc. </li> <li>If you really need to, you can fool some of the <code>snakemake</code> steps by seeing which files a given rule creates and making that file yourself. There might be cases when this is necessary (e.g. to bypass a check we have in place) but you should really understand what you're doing in this case.</li> </ul>"},{"location":"FAQs/","title":"FAQs and troubleshooting","text":"<p>Below are some frequently asked questions or bugs that have arisen during our use of the pipeline.</p>"},{"location":"FAQs/#the-allocation-code-fails-and-says-some-magnets-are-fully-blocked","title":"The allocation code fails and says \"Some magnets are fully blocked!\"","text":"<p>This means that there is no way for the Robot to place the magnets in the desired positions. The robot arm itself has a set clearance when it picks up and puts down magnets, and so some magnet configurations which don't clash aren't actually possible to put on the plate.</p> <p>In this case, you'll need to go back and use the interactive configuration tool to change the magnet positions to have a bit more clearance. The error message will let you know which magnets are affected.</p>"},{"location":"FAQs/#snakemake-has-an-error-which-mentions-the-files-below-seem-to-be-incomplete","title":"Snakemake has an error which mentions \"<code>The files below seem to be incomplete</code>\".","text":"<p>This happens when a <code>snakemake</code> task doesn't finish properly- often because it's been killed by someone pressing <code>Ctrl-C</code>. It's basically saying \"I don't know if the files below are finished or not!\".</p> <p>If you want to re-run the task which <code>snakemake</code> was in the middle of before it was killed, add <code>--rerun-incomplete</code> to the beginning of your command (e.g <code>snakemake --rerun-incomplete --configfile ...</code> etc). </p> <p>If you don't want to re-run the command that was killed, there are two options. I've found the best thing to do is delete the <code>.snakemake</code> folder: <code>rm -r .snakemake</code>. This deletes <code>snakemake's</code> history and it just forgets that it was halfway through a step. You can also follow the commands that <code>snakemake</code> suggests, about \"cleaning up metadata\", but I've found that this often doesn't work for some reason... (see e.g. this github issue).</p>"},{"location":"FAQs/#snakemake-complains-about-index-0-is-out-of-bounds-for-axis-with-size-0-and-mentions-the-_get_tile_filename-function","title":"Snakemake complains about \"<code>Index 0 is out of bounds for axis with size 0</code>\" and mentions the <code>_get_tile_filename</code> function.","text":"<p>This happens because Snakemake is trying to select a row from your <code>{start_date}_{end_date}_galaxy_tiles.csv</code> but there aren't any matches. Check that you've typed the tile filename exactly right on the command line (it's very easy to type <code>G12_tile_220</code> instead of <code>G15_tile_220</code>, for example!)</p>"},{"location":"FAQs/#snakemake-says-there-is-no-rule-to-make-filename","title":"Snakemake says \"there is no rule to make {filename}\"","text":"<p>This happens when <code>snakemake</code> can't figure out how to create the output file you've asked for. </p> <p>The most common cause of this is a typo in the filename you've passed it (e.g. asking it to make <code>G155_tile_220.tar.gz</code> will fail, for example). Another possible cause would be if you're asking it to make a tile which you haven't entered in the <code>resources/{run_dates}/{run_dates}_galaxy_tiles.csv</code> file. Check that the tile is located there and doesn't have any typos.</p>"},{"location":"FAQs/#snakemake-says-looks-like-we-have-a-mismatch-between-the-tile-numbers-and-the-filenames-somewhere","title":"Snakemake says \"Looks like we have a mismatch between the tile numbers and the filenames somewhere\"","text":"<p>This occurs when one (or more) of the rows in the <code>resources/{run_dates}/{run_dates}_galaxy_tiles.csv</code> is incorrect. If you tell <code>snakemake</code> to use a tile file from one tile number and a guide tile from another (e.g. one row references two different numbers), or if your tile number column in that file doesn't match the filenames, you'll see this error. Go back and check that all of the rows in that file are correct!</p>"},{"location":"FAQs/#the-distortion-correction-code-complains-about-reading-past-the-end-of-a-file","title":"The distortion correction code complains about \"Reading past the end of a file\"","text":"<p>This means a sky mask fits file the code is trying to read is corrupted or damaged. </p> <p>The distortion correction code reads all fits files in the folder path you give it, so make sure there aren't any files in there which aren't sky masks. We've seen this error before when the distortion correction code tried to read a hidden file called <code>._segmap_waves_18.0_-34.1_1.41_1.17.fits</code>. After deleting this file and all the others like it, everything worked as expected.</p>"},{"location":"FAQs/#snakemake-complains-about-error-tokenizing-data-expecting-5-lines-of-data-saw-n","title":"Snakemake complains about \"Error Tokenizing data: Expecting 5 lines of data, saw {n}\"","text":"<p>This is almost certainly caused by a typo in the <code>resources/{run_dates}/{run_dates}_galaxy_tiles.csv</code>. Check that you haven't added or forgotten a comma somewhere.</p>"},{"location":"Making_A_Hector_Tile/","title":"Making a Hector Tile","text":"<p>Below is a detailed set of instructions for making the files we need at the telescope. </p>"},{"location":"Making_A_Hector_Tile/#at-the-beginning-of-a-run","title":"At the beginning of a run","text":"<ul> <li>Make a new folder with the format <code>{run_start_date}_{run_end_date}</code> in the <code>resources</code> folder: e.g. <code>20240306_20240318</code> for an observing run between March 3rd and March 18th in 2024.</li> <li>Take the tiles from the Hector Tiling code and transfer them into this directory.</li> <li>Make a new file called <code>{run_start_date}_{run_end_date}_galaxy_tiles.csv</code>, e.g. <code>20240306_20240318_galaxy_tiles.csv</code>. This must have the columns named <code>field,tile_number,filename,guide_filename,image_source</code>. Each tile you want to run the pipeline on must be included here on a separate row.</li> <li>Pick a tile to make. Fill out the row in the <code>{run_start_date}_{run_end_date}_galaxy_tiles.csv</code> file with the correct information. The <code>image_source</code> column should be '<code>DECALS</code>' for all regions other than the G23 field where it should be '<code>KIDS</code>'. All filenames are relative to the main observing folder, i.e. they should begin with <code>resources/{run_start_date}_{run_end_date}/</code> etc.</li> <li>Now update the config file, which lives in <code>config/</code>. TODO: Write up explanation for this file.</li> </ul>"},{"location":"Making_A_Hector_Tile/#making-a-tile","title":"Making a tile","text":"<ul> <li>Make sure the <code>hector</code> environment has been activated. TODO: Add page about the Hector environment. </li> <li>Make sure the sky masks are available (i.e. plug in your external hard drive!)</li> <li>From the main folder, run <code>snakemake -npr --cores 1 --configfile config/{run_start_date}_{run_end_date}.yaml -- results/{run_start_date}_{run_end_date}/Upload/{tile_file_name}.tar.gz</code>. This will show you the commands which <code>snakemake</code> is about to run.</li> <li>To actually execute these, run <code>snakemake --cores 1 --configfile config/{run_start_date}_{run_end_date}.yaml -- results/{run_start_date}_{run_end_date}/Upload/{tile_file_name}.tar.gz</code> (i.e. remove the <code>-npr</code> bit).</li> </ul> <p>All going well, the pipeline will continue and the <code>R</code> plotting window will appear like so:</p> <p></p> <p>This can take 30-60 minutes to complete, so probably best to leave it running in the background while you do something else!</p> <p>When the R code is complete, the remaining pipeline steps usually complete without too much issue. If you run into an error, please check the FAQs.</p>"},{"location":"Making_A_Hector_Tile/#important-checks","title":"Important Checks","text":""},{"location":"Making_A_Hector_Tile/#checking-the-magnet-layout","title":"Checking the magnet layout","text":"<p>Each tile must be checked by eye before it's uploaded to the Data Central cloud. The configuration <code>R</code> code will sometimes result in a tile which is impossible to plug. If this isn't spotted before the plate is configured by the robot at the telescope then it  results in a lost half-night of observing. No one wants that!</p> <p>Make sure that every hexabundle on the plate has a clear path to one of the three exits. In particular, check that there's no cases of a hexabundle tail pointing straight into the side of another magnet, and no cases where a fibre cable would get squeezed in between two other magnets. </p> <p>Some common issues are shown below:</p> <p></p> <p>This shows a tail pointing straight towards another magnet, with nowhere for the fibre cable of magnet 12 to go.</p> <p></p> <p>This shows a tail pointing towards a \"V\" made by two magnets. Again, there's nowhere for the fibre cable of magnet 14 to go.</p> <p>In both of these cases, you'll need to go back and change the configuration!</p>"},{"location":"Making_A_Hector_Tile/#checking-the-galaxy-cutouts","title":"Checking the galaxy cutouts","text":"<p>Occasionally, a galaxy which wouldn't be suitable for observing sneaks through our quality control checks and ends up being assigned to a Hexabundle. This might be a galaxy which is actually a nearby star, an imaging artefact or a galaxy with a bright star nearby. </p> <p>We can catch these cases before the telescope by checking the imaging cutouts. These are saved in <code>results/{start_date}_{end_date}/Cutouts/{tile_name}</code>.</p> <p>Another important check is to make sure that all foreground targets in the cluster tiles are placed on Spector. If a foreground galaxy with a redshift much lower than the cluster redshift is placed on an AAOmega bundle (A through to H) then you'll need to use the <code>swap_hexabundles.py</code> script to move it to Spector (see Scripts for more info).</p>"},{"location":"Making_A_Hector_Tile/#ensuring-that-galaxies-are-always-repeated-on-the-same-spectrographs","title":"Ensuring that galaxies are always repeated on the same spectrographs","text":"<p>You might find that the <code>verify_tile_properties</code> script gives an error when a galaxy we're trying to observe in this tile was previously observed on the opposite spectrograph, i.e. tile B places a galaxy on an AAOmega bundle when tile A previously observed it with a Spector bundle.</p> <p>When this happens, you have to use the swap_hexabundles.py script to re-arrange things so that repeated galaxies are all on the same spectrographs as before.</p>"},{"location":"interactive_tools/","title":"Interactive tools","text":"<p>There are two interactive tools which have been built to help with running these tools. One of these allows you to select galaxies and make a brand new tile, and the other allows you to configure magnets on the field plate by hand.</p>"},{"location":"interactive_tools/#selecting-galaxies-to-create-a-tile-from-scratch","title":"Selecting galaxies to create a tile from scratch","text":"<p>The script <code>interactive_apps/HectorTilingApp.py</code> launches a dash/plotly app to create a Hector tile from scratch by clicking on galaxies, guide stars and standard stars. These tiles can then be saved and run through the pipeline to make a set of files which can be observed at the telescope. This is particularly important for the beginning of every observing run, where two special \"SNAFU\" tiles are needed for the first and second halves of the first night.</p>"},{"location":"interactive_tools/#starting-the-app","title":"Starting the app","text":"<p>The app needs a catalogue of galaxy targets, standard stars and guide stars for a given region of sky. You also need to pass the name of the region you're running. At the command line, run:</p> <pre><code>python interactive_apps/HectorTilingApp.py /path/to/target_catalogue.csv /path/to/standard_star_catalogue.csv /path/to/guide_star_catalogue.csv field_name\n</code></pre> <p>Note that the code expects that the standard star and guide star catalogues name have \"standard_star\" and \"guide_star\" in their filenames, and will error if this isn't the case. This was added to catch the bug where you pass these two catalogues to the code in the wrong order!</p> <p>You should get the following in the terminal:</p> <p></p> <p>Copy the web address (in this case <code>http://127.0.0.1:8051/</code>) into a browser. Note that the exact port number you see might be different! You should see the following:</p> <p></p> <p></p> <p>You can now move the Hector Field of View around by using the \"Tile RA\" and \"Tile DEC\" values at the top. Note that at low declinations, the FoV will appear more like an ellipse than a circle- this is correct and nothing to worry about!</p> <p>You can add a given galaxy to the tile by clicking on it. Click on it again to remove it. When you're done picking galaxies, change the target selection box to standard stars or guide stars and continue. </p> <p>When you've selected a few galaxies and stars, you'll see something this:</p> <p></p> <p>Note that this image is flipped up/down compared to when you look at Hector on the telescope- so the cable gap at the bottom of the plate is actually </p> <p>Every tile must have all hexabundles in use at all times. This means that every tile must contain 19 galaxy targets, 2 standard stars and 6 guide stars. It's okay to select more guides and standards than this: you can select which are actually allocated hexabundles during the Observing pipeline.</p>"},{"location":"interactive_tools/#notes-and-tips","title":"Notes and Tips","text":"<ul> <li>Note that the slider on the bottom marked \"Zoom Level\" makes the entire interactive box smaller or larger. If you click and drag a square on the data then you can zoom in on a specific region of the field. </li> <li>For a SNAFU tile, we need a guide star located 5\" from the centre of the tile. I find it easiest to pick a guide star, then take 5\" from its declination and place the tile centre at those coordinates.</li> <li>Sometimes it can be a bit fiddly to click on a galaxy to remove it. Apologies about this, but it will work eventually!</li> <li>As of November 2023, we're only using guide stars within the central 70% of the Field of View. Guides outside of this radius are automatically removed from the guide file by the pipeline. </li> <li>For fields at low declination, the Hector FoV will appear like an oval rather than a circle. This is intended! It's a consequence of mapping a a fixed circular object (the Hector FoV) with a physical width onto a spherical surface (the sky). At the poles, lines of constant RA get closer together and so the radius of the FoV has a \\(\\cos(\\delta)\\) scaling factor.</li> </ul>"},{"location":"interactive_tools/#configuring-a-field-plate-interactively","title":"Configuring a Field Plate Interactively","text":"<p>Open the file <code>interactive_apps/app_V3.R</code> in R-studio. At the top, click \"run app\" and a pop-up window should appear like below. I usually also select \"open in browser\". </p> <p></p> <p>After selecting a tile file and a guide tile in the top left corner, you'll see something like this:</p> <p></p> <p>Galaxies are coloured in blue, guide stars in yellow and standard stars in red. Double click on the head of a probe you want to rotate, then click again at the desired angle. Click \"Fix Probe\" on the left to save this new angle. Repeat until you have a finished configuration! The text above the \"Fix Probe\" button will let you know the number of conflicts in the field. This must be zero for a finished tile. You can download your tiles by clicking the \"Save new Hexa file\" and \"Save new Guide file\" on the left.</p> <p>Note that the code does not check that probes are orientated outside the field of view. You must ensure that all the magnets are actually on the plate before continuing. </p> <p>At the bottom left, there are advanced options to get the code to give you a \"first guess\" for each set of probes. When starting a field completely from scratch, this first guess is often not a bad first approximation and using it can speed up the process.</p>"},{"location":"scripts/","title":"Scripts","text":"<p>There are several scripts included in the repository which perform helpful tasks. Running any of the scripts below with the single argument <code>-h</code> will print out some useful text describing each argument and the script's purpose.</p>"},{"location":"scripts/#swapping-hexabundles","title":"Swapping Hexabundles","text":"<p>It is often important to swap the Hexabundles which are assigned by the allocation code between galaxies. You can do this using the script <code>swap_hexabundles.py</code>.</p> <p>The inputs for this script are the \"tile\" and \"robot\" files in the \"FinalOutputs\" folder. You then supply the Hexabundles you wish to swap as a pair of letters separated by a dash. Multiple pairs of Hexabundles may be passed at the same time. For example, to swap the galaxies placed on Hexabundles J and K for the tile G15 tile 220, you d run:</p> <pre><code>python swap_hexabundle.py results/20240306_20240318/TilingOutputs/G15/FinalOutputs/Tile_G15_T220.csv results/20240306_20240318/TilingOutputs/G15/FinalOutputs/Robot_G15_T220.csv J-K\n</code></pre> <p>The script makes a backup of the original file, which is saved to the original filename with <code>.backup</code> appended to the end. If you'd like to undo your changes, just run </p> <pre><code>mv path/to/Tile_G15_T220.csv.backup path/to/Tile_G15_T220.csv\n</code></pre>"},{"location":"scripts/#selecting-guide-stars-for-a-tile","title":"Selecting Guide Stars for a tile","text":"<p>It's often useful to be able to select which guide stars you'd like to include in a tile. We can do that using <code>select_guides_from_file.py</code>.</p> <p>The input is a guide file which hasn't been configured by the R code, i.e. it should have <code>NOT_CONFIGURED</code> in the filename. You also pass the integer IDs of the 6 guide stars you'd like to select (i.e. the numbers which are shown in the interactive configuration tool).</p> <p>For example, to select the guide stars 1, 3, 5, 7, 9 and 11 from G15 tile 220, you'd run:</p> <pre><code>python select_guides_from_file.py results/20240306_20240318/TilingOutputs/G15/Configuration/Guides_G15_tile_220_NOT_CONFIGURED.csv 1 3 5 7 9 11\n</code></pre> <p>The script makes a backup by copying the original file to a file with the same name with <code>.backup</code> appended to the end. If you'd like to undo your changes, you can just run:</p> <pre><code>mv path/to/Guides_G15_tile_220_NOT_CONFIGURED.csv.backup pat/to/Guides_G15_tile_220_NOT_CONFIGURED.csv\n</code></pre>"},{"location":"scripts/#selecting-standard-stars-for-a-tile","title":"Selecting Standard Stars for a tile","text":"<p>Occasionally you'll need to select which standard stars go into a tile (although much less regularly than for the guides!). You can do this by using the <code>select_standards_from_file.py</code> script.</p> <p>The input is a hexabundle file which hasn't been configured by the R code, i.e. it should have <code>NOT_CONFIGURED</code> in the filename. You then pass two numbers as integers on the command line. These numbers refer to the standard stars in order of distance from the centre, not their ID number. We use python 0-based indexing, so passing <code>0</code> and <code>1</code> would select the two stars closest to the field centre.</p> <p>So to select the two standards closest to the field centre for G15 tile 220, you'd run:</p> <pre><code>python select_standards_from_file.py results/20240306_20240318/TilingOutputs/G15/Configuration/Hexas_G15_tile_220_NOT_CONFIGURED.csv 0 1\n</code></pre> <p>This script makes a backup of the <code>Hexas_</code> file and save it to the original filename with <code>.backup</code> appended to the end.</p> <p>Once you've selected your stars, you can then use the interactive configuration tool to load this edited file and check that these two stars aren't clashing with each other or another galaxy. If you need to pick different stars and undo your changes, you can run:</p> <pre><code>mv path/to/Hexas_G15_tile_220_NOT_CONFIGURED.csv.backup pat/to/Hexas_G15_tile_220_NOT_CONFIGURED.csv\n</code></pre> <p>and use the script again.</p>"},{"location":"worked_example/","title":"Worked Example: G15 tile 221","text":"<p>Below is a worked example of making G15 tile 221 ready for use at the telescope.</p>"}]}