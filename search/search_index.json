{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Making Hector Tiles for Observing","text":"<p>A first go at making docs for the process of making tiles for the Hector Survey.</p>"},{"location":"#tiling-steps","title":"Tiling Steps","text":"<ol> <li>Removing all guide stars which are outside the central 70% of the field (<code>select_guides_within_set_radius.py</code>).</li> <li>Copying the tile and guide tile to the <code>results/{run_start_date}_{run_end_date}/TilingOutputs/{region_name}/Tiles</code> folder.</li> <li>Run the distortion correction code, which turns right-ascension and declination into plate $x$ and $y$ coordinates and finds the appropriate sky-fibre positions (<code>run_distortion_correction_code.py</code>).</li> <li>Run the configuration code, which finds magnet positions across the plate (<code>HECTOR_ClusterFieldsTest.R</code>).</li> <li>Fix the file headers into the correct format (<code>update_header.py</code>).</li> <li>Run the allocation code, which decides which hexabundle is placed on which galaxy. This code also creates the final output files in the format required by the computers at the AAT (<code>allocate_tile_for_galaxies.py</code>).</li> <li>Download the galaxy cutouts for each Hexabundle, Guide bundle and sky fibre (<code>get_galaxy_cutouts.py</code>).</li> <li>Run a series of sanity-checks to catch a number of simple mistakes (e.g. we check the number of guide bundles in each tile is 6, etc). Also use the Hector observing database to see how many galaxies in this tile have been observed before (<code>scripts/verify_tile_properties.py</code>).</li> <li>Add the tile to our database of configured tiles (<code>add_configured_tile_to_database.py</code>).</li> <li>Make the plot the observers used at the top-end of the telescope (<code>make_updated_hexabundle_diagrams.py</code>).</li> <li>Package everything up in a nice format which can be easily uploaded to the cloud.</li> </ol>"},{"location":"FAQs/","title":"FAQs","text":"<p>Below are some frequently asked questions or bugs that have arisen during our use of the pipeline.</p>"},{"location":"FAQs/#snakemake-has-an-error-which-mentions-the-files-below-seem-to-be-incomplete","title":"Snakemake has an error which mentions \"<code>The files below seem to be incomplete</code>\".","text":"<p>This happens when a <code>snakemake</code> task doesn't finish properly- often because it's been killed by someone pressing <code>Ctrl-C</code>. It's basically saying \"I don't know if the files below are finished or not!\".</p> <p>If you want to re-run the task which <code>snakemake</code> was in the middle of before it was killed, add <code>--rerun-incomplete</code> to the beginning of your command (e.g <code>snakemake --rerun-incomplete --configfile ...</code> etc). </p> <p>If you don't want to re-run the command that was killed, there are two options. I've found the best thing to do is delete the <code>.snakemake</code> folder: <code>rm -r .snakemake</code>. This deletes <code>snakemake's</code> history and it just forgets that it was halfway through a step. You can also follow the commands that <code>snakemake</code> suggests, about \"cleaning up metadata\", but I've found that this often doesn't work for some reason... (see e.g. this github issue).</p>"},{"location":"FAQs/#snakemake-complains-about-index-0-is-out-of-bounds-for-axis-with-size-0-and-mentions-the-_get_tile_filename-function","title":"Snakemake complains about \"<code>Index 0 is out of bounds for axis with size 0</code>\" and mentions the <code>_get_tile_filename</code> function.","text":"<p>This happens because Snakemake is trying to select a row from your <code>{start_date}_{end_date}_galaxy_tiles.csv</code> but there aren't any matches. Check that you've typed the tile filename exactly right on the command line (it's very easy to type <code>G12_tile_220</code> instead of <code>G15_tile_220</code>, for example!)</p>"},{"location":"GettingStarted/","title":"Getting Started at the beginning of a run","text":"<p>ToDo: Write this up properly.</p>"},{"location":"GettingStarted/#at-the-beginning-of-a-run","title":"At the beginning of a run","text":"<ul> <li>Make a new folder with the dates of the observing run in the <code>resources</code> folder: e.g. <code>20240306_20240318</code> for an observing run between March 3rd and March 18th in 2024.</li> <li>Take the tiles from the Hector Tiling code and transfer them into this directory.</li> <li>Make a new file called <code>{run_start_date}_{run_end_date}_galaxy_tiles.csv</code>, e.g. <code>20240306_20240318_galaxy_tiles.csv</code>. This must have the columns named <code>field,tile_number,filename,guide_filename,image_source</code>.</li> <li>Pick a tile to make. Fill out the row in the <code>{run_start_date}_{run_end_date}_galaxy_tiles.csv</code> file with the correct information. The <code>image_source</code> column should be '<code>DECALS</code>' for all regions other than the G23 field- here you have to use '<code>KIDS</code>'. All filenames are relative to the main observing folder, i.e. they should begin with <code>resources/{run_start_date}_{run_end_date}/</code> etc.</li> <li>Now update the config file, which lives in <code>config/</code>. TODO: Write up explanation for this file.</li> </ul>"},{"location":"GettingStarted/#making-a-tile","title":"Making a tile","text":"<ul> <li>Make sure the <code>hector</code> environment has been activated. TODO: Add page about the Hector environment. </li> <li>Make sure the sky masks are available (i.e. plug in your external hard drive!)</li> <li>From the main folder, run <code>snakemake -npr --cores 1 --configfile config/{run_start_date}_{run_end_date}.yaml -- results/{run_start_date}_{run_end_date}/Upload/{tile_file_name}.tar.gz</code>. This will show you the commands which <code>SnakeMake</code> is about to run.</li> <li>To actually execute these, run <code>snakemake --cores 1 --configfile config/{run_start_date}_{run_end_date}.yaml -- results/{run_start_date}_{run_end_date}/Upload/{tile_file_name}.tar.gz</code> (i.e. get rid of the <code>-npr</code> bit).</li> </ul> <p>All going well, the pipeline will continue and the <code>R</code> plotting window will appear. </p>"}]}